// ==UserScript==
// @name         Alt ChatGPT
// @namespace    http://tampermonkey.net/
// @version      2024-03-20
// @description try to take over the world!
// @author       You
// @match        https://chat.openai.com/*
// @match        https://www.example.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=openai.com
// @grant        GM_xmlhttpRequest
// ==/UserScript==

// Define the port number variable at the top of your script
const PORT_NUMBER = 8000;

let device_id="";

(function() {


    // Function to handle the response from the local file
    function handleResponse(response) {
        if (response.status == 200) {
            console.log("File contents:");
            console.log(response.responseText); // Output the content of the local file to the console
        } else {
            console.error("Error loading file:", response.statusText);
        }
    }

    // URL of the local file
var localFileUrl = "file:///C:/Users/24namankwah/Desktop/Jarvis/prompt.txt"; // Replace with the path to your local file

    // Make a request to the local file
    GM_xmlhttpRequest({
        method: "GET",
        url: localFileUrl,
        onload: handleResponse
    });
})();


let accessToken; // Global variable declaration
let chatreqToken;
async function fetchAccessToken() {
    try {
        const response = await fetch('https://chat.openai.com/api/auth/session');
        if (response.ok) {
            const data = await response.json();
            accessToken = data.accessToken; // Assigning the value to the global variable
            console.log('Bearer ID (accessToken):', accessToken);
        } else {
            throw new Error('Failed to fetch Bearer ID');
        }
    } catch (error) {
        console.error('Error fetching Bearer ID:', error);
    }
}

async function getDeviceID()
{
    // Make the POST request
    fetch("https://chat.openai.com/")
        .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text();
    })
        .then(html => {
        // Parse the HTML response
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");

        // Find the <script id="__NEXT_DATA__"> tag
        const scriptTag = doc.querySelector('script#__NEXT_DATA__');
        if (scriptTag) {
            // Extract the content within the script tag
            const scriptContent = scriptTag.textContent.trim();


            // Parse the JSON content
            try {
                const jsonData = JSON.parse(scriptContent);
                // Access the desired properties
                const evaluatedKeys = jsonData.props.pageProps.statsig.payload.evaluated_keys;


                // Extract DeviceId from evaluated_keys.customIDs
                const deviceId = evaluatedKeys.customIDs.DeviceId;
                console.log("DeviceId:", deviceId);
                return deviceId;
            } catch (error) {
                console.error("Error parsing JSON:", error);
            }
        } else {
            console.log("Script tag with id '__NEXT_DATA__' not found.");
        }
    })
        .catch(error => {
        console.error("Error:", error);
    });
}
device_id=await getDeviceID();

function fetchChatRequirements() {
    if (!accessToken) {
        console.error('Access token not available. Please fetch the access token first.');
        return;
    }

    fetch('https://chat.openai.com/backend-api/sentinel/chat-requirements', {
        method: 'POST',
        headers: {
            "Authorization": `Bearer ${accessToken}` // Adding Bearer token to the Authorization header
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {

        chatreqToken=data.token;
        console.log('Response:', chatreqToken);
        // Handle response data
    })
    .catch(error => {
        console.error('Error fetching chat requirements:', error);
        // Handle error
    });
}

// Call fetchAccessToken only once
await fetchAccessToken();

// Call fetchChatRequirements multiple times if needed
fetchChatRequirements();



(function() {
    // Function to fetch data from get_relay_data endpoint
    function fetchData() {
        GM_xmlhttpRequest({
            url: `http://localhost:${PORT_NUMBER}/get_relay_data`,
            method: "GET",
            onload: function(response) {
                if (response.status === 200) {
                    try {
                        console.log(response.responseText);
                        const {unique_key, apiUrl, arg2 } = JSON.parse(response.responseText);
                        console.log(apiUrl,arg2);
                        // Assuming arg2 is an object with a headers property
                        arg2.headers.Authorization = "Bearer " + accessToken;
                        arg2.headers["OAI-Device-Id"]=device_id
                        if(apiUrl=='Get-Bearer-Only') { //Handle Unique case where i just need an updated Bearer ID
                            GM_xmlhttpRequest({
                                method: 'POST',
                                url: `http://localhost:${PORT_NUMBER}/set_relay_data2`,
                                data: JSON.stringify({
                                    unique_key: unique_key, // Include the unique key here
                                    Bearer: arg2.headers.Authorization
                                }),
                                headers: {
                                    'Content-Type': 'text/plain'
                                },
                                onload: function(response) {
                                    if (response.status === 200) {
                                        console.log('Response text sent successfully.');
                                    } else {
                                        console.error('Failed to send response text:', response.statusText);
                                    }
                                },
                                onerror: function(response) {
                                    console.error('Error sending response text:', response.statusText);
                                }
                            }).finally(fetchData);
                        }

                        fetchChatRequirements();
                        arg2.headers["OpenAI-Sentinel-Chat-Requirements-Token"] = chatreqToken;
                        console.log("Bats: ",arg2)
                        // Make an HTTP request using fetched arguments
                        fetch(apiUrl, arg2)
                            .then(response => response.text())
                            .then(responseText => {
                                console.log(responseText);
                                // Make another POST request to send the response text back to the server
                                GM_xmlhttpRequest({
                                    method: 'POST',
                                    url: `http://localhost:${PORT_NUMBER}/set_relay_data2`,
                                    data: JSON.stringify({
                                        unique_key: unique_key, // Include the unique key here
                                        responseText: responseText // Include the responseText here
                                    }),
                                    headers: {
                                        'Content-Type': 'text/plain'
                                    },
                                    onload: function(response) {
                                        if (response.status === 200) {
                                            console.log('Response text sent successfully.');
                                        } else {
                                            console.error('Failed to send response text:', response.statusText);
                                        }
                                    },
                                    onerror: function(response) {
                                        console.error('Error sending response text:', response.statusText);
                                    }
                                });
                            })
                            .catch(error => console.error('Error fetching data:', error))
                            .finally(() => {
            // Retry fetching data after 1000 seconds
            setTimeout(fetchData, 1000); // 1000 seconds = 1000 * 1000 milliseconds
        }); // Retry fetching data after completion
                    } catch (error) {
                        console.error('Error parsing JSON:', error);
                        fetchData(); // Retry fetching data on error
                    }
                } else {
                    console.error('Failed to load arguments:', response.statusText);
                    setTimeout(fetchData, 1000); // Retry fetching data after 1 second
                }
            },
            onerror: function(response) {
                console.error('Error loading arguments:', response.statusText);
                setTimeout(fetchData, 1000); // Retry fetching data after 1 second
            },
            ontimeout: function(response) {
                console.error('Request timed out:', response.statusText);
                setTimeout(fetchData, 1000); // Retry fetching data after 1 second
            },
        });
    }

    // Initial call to fetch data
    fetchData();
})();
